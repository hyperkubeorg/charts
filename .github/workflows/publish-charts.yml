name: Publish Helm Charts

on:
  push:
    branches:
      - main
    paths:
      - '*/Chart.yaml'
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  discover-charts:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.discover.outputs.charts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Discover Helm charts
        id: discover
        run: |
          # Find all Chart.yaml files in root-level directories
          charts=()
          for chart_yaml in */Chart.yaml; do
            if [[ -f "$chart_yaml" ]]; then
              chart_dir=$(dirname "$chart_yaml")
              charts+=("$chart_dir")
            fi
          done
          
          # Convert array to JSON format for matrix strategy
          if [[ ${#charts[@]} -gt 0 ]]; then
            printf -v joined '"%s",' "${charts[@]}"
            charts_json="[${joined%,}]"
          else
            charts_json="[]"
          fi
          
          echo "charts=$charts_json" >> $GITHUB_OUTPUT
          echo "Discovered charts: $charts_json"

  publish-charts:
    needs: discover-charts
    if: needs.discover-charts.outputs.charts != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.discover-charts.outputs.charts) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ env.REGISTRY_PASSWORD }}" | helm registry login ${{ env.REGISTRY }} --username ${{ env.REGISTRY_USERNAME }} --password-stdin

      - name: Extract chart information
        id: chart-info
        run: |
          chart_name=$(yq eval '.name' ${{ matrix.chart }}/Chart.yaml)
          chart_version=$(yq eval '.version' ${{ matrix.chart }}/Chart.yaml)
          
          echo "name=$chart_name" >> $GITHUB_OUTPUT
          echo "version=$chart_version" >> $GITHUB_OUTPUT
          echo "Chart: $chart_name, Version: $chart_version"

      - name: Package Helm chart
        run: |
          helm dependency build ${{ matrix.chart }}
          helm package ${{ matrix.chart }} --destination ./packages

      - name: Push chart to GHCR
        run: |
          chart_package=$(find ./packages -name "${{ steps.chart-info.outputs.name }}-${{ steps.chart-info.outputs.version }}.tgz")
          
          if [[ -f "$chart_package" ]]; then
            helm push "$chart_package" oci://${{ env.REGISTRY }}/${{ github.repository_owner }}
            echo "Successfully pushed ${{ steps.chart-info.outputs.name }}:${{ steps.chart-info.outputs.version }}"
          else
            echo "Chart package not found!"
            exit 1
          fi

      - name: Verify chart push
        run: |
          echo "Chart published successfully!"
          echo "You can now install it with:"
          echo "helm install my-release oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ steps.chart-info.outputs.name }} --version ${{ steps.chart-info.outputs.version }}"
